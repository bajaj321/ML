% Generate synthetic data (or load your dataset)
% Logistic Regression in MATLAB
% Generate synthetic data
rng(0); % For reproducibility
num_points = 100;
X = [rand(num_points, 2) * 2 - 1; rand(num_points, 2) * 2 + 1];
y = [zeros(num_points, 1); ones(num_points, 1)];
% Add bias term (intercept) to X
X = [ones(size(X, 1), 1), X];
% Sigmoid function
sigmoid = @(z) 1 ./ (1 + exp(-z));
% Cost function
costFunction = @(theta) (-1/length(y)) * sum(y .*
log(sigmoid(X * theta)) + (1 - y) .* log(1 -sigmoid(X * theta)));
% Gradient descent parameters
alpha = 10;
num_iters = 1000;
theta = zeros(size(X, 2), 1);
m = length(y);
% Gradient descent loop
for iter = 1:num_iters
 gradient = (1/m) * X' * (sigmoid(X * theta) - y);
 theta = theta - alpha * gradient;
end
% Plot the data
figure;
hold on;
scatter(X(y==0, 2), X(y==0, 3), 'r', 'filled'); % Class 0
scatter(X(y==1, 2), X(y==1, 3), 'b', 'filled'); % Class 1
% Plot decision boundary
x_vals = linspace(min(X(:,2)), max(X(:,2)), 100);
y_vals = -(theta(1) + theta(2) * x_vals) / theta(3);
plot(x_vals, y_vals, 'k-'
, 'LineWidth', 2);
title('Logistic Regression Decision Boundary');
xlabel('Feature 1');
ylabel('Feature 2');
legend('Class 0', 'Class 1', 'Decision Boundary');
hold off;
